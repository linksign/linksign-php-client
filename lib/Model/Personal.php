<?php
/**
 * Personal
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Personal Class Doc Comment
 *
 * @category    Class
 * @description \u4E2A\u4EBA\u4FE1\u606F
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Personal implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'person_email' => 'string',
        'person_idcard_number' => 'string',
        'person_idcard_type' => 'string',
        'person_name' => 'string',
        'person_org_name' => 'string',
        'person_phone' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'person_email' => 'personEmail',
        'person_idcard_number' => 'personIdcardNumber',
        'person_idcard_type' => 'personIdcardType',
        'person_name' => 'personName',
        'person_org_name' => 'personOrgName',
        'person_phone' => 'personPhone'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'person_email' => 'setPersonEmail',
        'person_idcard_number' => 'setPersonIdcardNumber',
        'person_idcard_type' => 'setPersonIdcardType',
        'person_name' => 'setPersonName',
        'person_org_name' => 'setPersonOrgName',
        'person_phone' => 'setPersonPhone'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'person_email' => 'getPersonEmail',
        'person_idcard_number' => 'getPersonIdcardNumber',
        'person_idcard_type' => 'getPersonIdcardType',
        'person_name' => 'getPersonName',
        'person_org_name' => 'getPersonOrgName',
        'person_phone' => 'getPersonPhone'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $person_email 
      * @var string
      */
    protected $person_email;
    
    /**
      * $person_idcard_number 
      * @var string
      */
    protected $person_idcard_number;
    
    /**
      * $person_idcard_type 
      * @var string
      */
    protected $person_idcard_type;
    
    /**
      * $person_name 
      * @var string
      */
    protected $person_name;
    
    /**
      * $person_org_name 
      * @var string
      */
    protected $person_org_name;
    
    /**
      * $person_phone 
      * @var string
      */
    protected $person_phone;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->person_email = $data["person_email"];
            $this->person_idcard_number = $data["person_idcard_number"];
            $this->person_idcard_type = $data["person_idcard_type"];
            $this->person_name = $data["person_name"];
            $this->person_org_name = $data["person_org_name"];
            $this->person_phone = $data["person_phone"];
        }
    }
    
    /**
     * Gets person_email
     * @return string
     */
    public function getPersonEmail()
    {
        return $this->person_email;
    }
  
    /**
     * Sets person_email
     * @param string $person_email 
     * @return $this
     */
    public function setPersonEmail($person_email)
    {
        
        $this->person_email = $person_email;
        return $this;
    }
    
    /**
     * Gets person_idcard_number
     * @return string
     */
    public function getPersonIdcardNumber()
    {
        return $this->person_idcard_number;
    }
  
    /**
     * Sets person_idcard_number
     * @param string $person_idcard_number 
     * @return $this
     */
    public function setPersonIdcardNumber($person_idcard_number)
    {
        
        $this->person_idcard_number = $person_idcard_number;
        return $this;
    }
    
    /**
     * Gets person_idcard_type
     * @return string
     */
    public function getPersonIdcardType()
    {
        return $this->person_idcard_type;
    }
  
    /**
     * Sets person_idcard_type
     * @param string $person_idcard_type 
     * @return $this
     */
    public function setPersonIdcardType($person_idcard_type)
    {
        
        $this->person_idcard_type = $person_idcard_type;
        return $this;
    }
    
    /**
     * Gets person_name
     * @return string
     */
    public function getPersonName()
    {
        return $this->person_name;
    }
  
    /**
     * Sets person_name
     * @param string $person_name 
     * @return $this
     */
    public function setPersonName($person_name)
    {
        
        $this->person_name = $person_name;
        return $this;
    }
    
    /**
     * Gets person_org_name
     * @return string
     */
    public function getPersonOrgName()
    {
        return $this->person_org_name;
    }
  
    /**
     * Sets person_org_name
     * @param string $person_org_name 
     * @return $this
     */
    public function setPersonOrgName($person_org_name)
    {
        
        $this->person_org_name = $person_org_name;
        return $this;
    }
    
    /**
     * Gets person_phone
     * @return string
     */
    public function getPersonPhone()
    {
        return $this->person_phone;
    }
  
    /**
     * Sets person_phone
     * @param string $person_phone 
     * @return $this
     */
    public function setPersonPhone($person_phone)
    {
        
        $this->person_phone = $person_phone;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
