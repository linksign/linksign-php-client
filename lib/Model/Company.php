<?php
/**
 * Company
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Company Class Doc Comment
 *
 * @category    Class
 * @description \u5355\u4F4D\u4FE1\u606F
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Company implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'org_authorizer_email' => 'string',
        'org_authorizer_idcard_number' => 'string',
        'org_authorizer_idcard_type' => 'string',
        'org_authorizer_name' => 'string',
        'org_authorizer_phone' => 'string',
        'org_idcard_number' => 'string',
        'org_idcard_type' => 'string',
        'org_name' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'org_authorizer_email' => 'orgAuthorizerEmail',
        'org_authorizer_idcard_number' => 'orgAuthorizerIdcardNumber',
        'org_authorizer_idcard_type' => 'orgAuthorizerIdcardType',
        'org_authorizer_name' => 'orgAuthorizerName',
        'org_authorizer_phone' => 'orgAuthorizerPhone',
        'org_idcard_number' => 'orgIdcardNumber',
        'org_idcard_type' => 'orgIdcardType',
        'org_name' => 'orgName'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'org_authorizer_email' => 'setOrgAuthorizerEmail',
        'org_authorizer_idcard_number' => 'setOrgAuthorizerIdcardNumber',
        'org_authorizer_idcard_type' => 'setOrgAuthorizerIdcardType',
        'org_authorizer_name' => 'setOrgAuthorizerName',
        'org_authorizer_phone' => 'setOrgAuthorizerPhone',
        'org_idcard_number' => 'setOrgIdcardNumber',
        'org_idcard_type' => 'setOrgIdcardType',
        'org_name' => 'setOrgName'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'org_authorizer_email' => 'getOrgAuthorizerEmail',
        'org_authorizer_idcard_number' => 'getOrgAuthorizerIdcardNumber',
        'org_authorizer_idcard_type' => 'getOrgAuthorizerIdcardType',
        'org_authorizer_name' => 'getOrgAuthorizerName',
        'org_authorizer_phone' => 'getOrgAuthorizerPhone',
        'org_idcard_number' => 'getOrgIdcardNumber',
        'org_idcard_type' => 'getOrgIdcardType',
        'org_name' => 'getOrgName'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $org_authorizer_email \u5355\u4F4D\u6388\u6743\u4EBA\u90AE\u7BB1
      * @var string
      */
    protected $org_authorizer_email;
    
    /**
      * $org_authorizer_idcard_number \u5355\u4F4D\u6388\u6743\u4EBA\u8BC1\u4EF6\u53F7\u7801
      * @var string
      */
    protected $org_authorizer_idcard_number;
    
    /**
      * $org_authorizer_idcard_type \u5355\u4F4D\u6388\u6743\u4EBA\u8BC1\u4EF6\u7C7B\u578B
      * @var string
      */
    protected $org_authorizer_idcard_type;
    
    /**
      * $org_authorizer_name \u5355\u4F4D\u6388\u6743\u4EBA\u59D3\u540D
      * @var string
      */
    protected $org_authorizer_name;
    
    /**
      * $org_authorizer_phone 
      * @var string
      */
    protected $org_authorizer_phone;
    
    /**
      * $org_idcard_number \u5355\u4F4D\u8BC1\u4EF6\u7F16\u53F7
      * @var string
      */
    protected $org_idcard_number;
    
    /**
      * $org_idcard_type \u5355\u4F4D\u8BC1\u4EF6\u7C7B\u578B
      * @var string
      */
    protected $org_idcard_type;
    
    /**
      * $org_name \u5355\u4F4D\u540D\u79F0
      * @var string
      */
    protected $org_name;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->org_authorizer_email = $data["org_authorizer_email"];
            $this->org_authorizer_idcard_number = $data["org_authorizer_idcard_number"];
            $this->org_authorizer_idcard_type = $data["org_authorizer_idcard_type"];
            $this->org_authorizer_name = $data["org_authorizer_name"];
            $this->org_authorizer_phone = $data["org_authorizer_phone"];
            $this->org_idcard_number = $data["org_idcard_number"];
            $this->org_idcard_type = $data["org_idcard_type"];
            $this->org_name = $data["org_name"];
        }
    }
    
    /**
     * Gets org_authorizer_email
     * @return string
     */
    public function getOrgAuthorizerEmail()
    {
        return $this->org_authorizer_email;
    }
  
    /**
     * Sets org_authorizer_email
     * @param string $org_authorizer_email \u5355\u4F4D\u6388\u6743\u4EBA\u90AE\u7BB1
     * @return $this
     */
    public function setOrgAuthorizerEmail($org_authorizer_email)
    {
        
        $this->org_authorizer_email = $org_authorizer_email;
        return $this;
    }
    
    /**
     * Gets org_authorizer_idcard_number
     * @return string
     */
    public function getOrgAuthorizerIdcardNumber()
    {
        return $this->org_authorizer_idcard_number;
    }
  
    /**
     * Sets org_authorizer_idcard_number
     * @param string $org_authorizer_idcard_number \u5355\u4F4D\u6388\u6743\u4EBA\u8BC1\u4EF6\u53F7\u7801
     * @return $this
     */
    public function setOrgAuthorizerIdcardNumber($org_authorizer_idcard_number)
    {
        
        $this->org_authorizer_idcard_number = $org_authorizer_idcard_number;
        return $this;
    }
    
    /**
     * Gets org_authorizer_idcard_type
     * @return string
     */
    public function getOrgAuthorizerIdcardType()
    {
        return $this->org_authorizer_idcard_type;
    }
  
    /**
     * Sets org_authorizer_idcard_type
     * @param string $org_authorizer_idcard_type \u5355\u4F4D\u6388\u6743\u4EBA\u8BC1\u4EF6\u7C7B\u578B
     * @return $this
     */
    public function setOrgAuthorizerIdcardType($org_authorizer_idcard_type)
    {
        
        $this->org_authorizer_idcard_type = $org_authorizer_idcard_type;
        return $this;
    }
    
    /**
     * Gets org_authorizer_name
     * @return string
     */
    public function getOrgAuthorizerName()
    {
        return $this->org_authorizer_name;
    }
  
    /**
     * Sets org_authorizer_name
     * @param string $org_authorizer_name \u5355\u4F4D\u6388\u6743\u4EBA\u59D3\u540D
     * @return $this
     */
    public function setOrgAuthorizerName($org_authorizer_name)
    {
        
        $this->org_authorizer_name = $org_authorizer_name;
        return $this;
    }
    
    /**
     * Gets org_authorizer_phone
     * @return string
     */
    public function getOrgAuthorizerPhone()
    {
        return $this->org_authorizer_phone;
    }
  
    /**
     * Sets org_authorizer_phone
     * @param string $org_authorizer_phone 
     * @return $this
     */
    public function setOrgAuthorizerPhone($org_authorizer_phone)
    {
        
        $this->org_authorizer_phone = $org_authorizer_phone;
        return $this;
    }
    
    /**
     * Gets org_idcard_number
     * @return string
     */
    public function getOrgIdcardNumber()
    {
        return $this->org_idcard_number;
    }
  
    /**
     * Sets org_idcard_number
     * @param string $org_idcard_number \u5355\u4F4D\u8BC1\u4EF6\u7F16\u53F7
     * @return $this
     */
    public function setOrgIdcardNumber($org_idcard_number)
    {
        
        $this->org_idcard_number = $org_idcard_number;
        return $this;
    }
    
    /**
     * Gets org_idcard_type
     * @return string
     */
    public function getOrgIdcardType()
    {
        return $this->org_idcard_type;
    }
  
    /**
     * Sets org_idcard_type
     * @param string $org_idcard_type \u5355\u4F4D\u8BC1\u4EF6\u7C7B\u578B
     * @return $this
     */
    public function setOrgIdcardType($org_idcard_type)
    {
        
        $this->org_idcard_type = $org_idcard_type;
        return $this;
    }
    
    /**
     * Gets org_name
     * @return string
     */
    public function getOrgName()
    {
        return $this->org_name;
    }
  
    /**
     * Sets org_name
     * @param string $org_name \u5355\u4F4D\u540D\u79F0
     * @return $this
     */
    public function setOrgName($org_name)
    {
        
        $this->org_name = $org_name;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
