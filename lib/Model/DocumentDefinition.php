<?php
/**
 * DocumentDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * DocumentDefinition Class Doc Comment
 *
 * @category    Class
 * @description \u7B7E\u7F72\u6587\u6863\u5B9A\u4E49
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DocumentDefinition implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'documents' => '\Swagger\Client\Model\Document[]',
        'email_blurb' => 'string',
        'email_subject' => 'string',
        'signers' => '\Swagger\Client\Model\Signers'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'documents' => 'documents',
        'email_blurb' => 'emailBlurb',
        'email_subject' => 'emailSubject',
        'signers' => 'signers'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'documents' => 'setDocuments',
        'email_blurb' => 'setEmailBlurb',
        'email_subject' => 'setEmailSubject',
        'signers' => 'setSigners'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'documents' => 'getDocuments',
        'email_blurb' => 'getEmailBlurb',
        'email_subject' => 'getEmailSubject',
        'signers' => 'getSigners'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $documents \u5F85\u7B7E\u7F72\u7684\u6587\u6863\u5217\u8868
      * @var \Swagger\Client\Model\Document[]
      */
    protected $documents;
    
    /**
      * $email_blurb \u90AE\u4EF6\u7B80\u4ECB
      * @var string
      */
    protected $email_blurb;
    
    /**
      * $email_subject \u90AE\u4EF6\u4E3B\u9898
      * @var string
      */
    protected $email_subject;
    
    /**
      * $signers \u7B7E\u7F72\u4EBA
      * @var \Swagger\Client\Model\Signers
      */
    protected $signers;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->documents = $data["documents"];
            $this->email_blurb = $data["email_blurb"];
            $this->email_subject = $data["email_subject"];
            $this->signers = $data["signers"];
        }
    }
    
    /**
     * Gets documents
     * @return \Swagger\Client\Model\Document[]
     */
    public function getDocuments()
    {
        return $this->documents;
    }
  
    /**
     * Sets documents
     * @param \Swagger\Client\Model\Document[] $documents \u5F85\u7B7E\u7F72\u7684\u6587\u6863\u5217\u8868
     * @return $this
     */
    public function setDocuments($documents)
    {
        
        $this->documents = $documents;
        return $this;
    }
    
    /**
     * Gets email_blurb
     * @return string
     */
    public function getEmailBlurb()
    {
        return $this->email_blurb;
    }
  
    /**
     * Sets email_blurb
     * @param string $email_blurb \u90AE\u4EF6\u7B80\u4ECB
     * @return $this
     */
    public function setEmailBlurb($email_blurb)
    {
        
        $this->email_blurb = $email_blurb;
        return $this;
    }
    
    /**
     * Gets email_subject
     * @return string
     */
    public function getEmailSubject()
    {
        return $this->email_subject;
    }
  
    /**
     * Sets email_subject
     * @param string $email_subject \u90AE\u4EF6\u4E3B\u9898
     * @return $this
     */
    public function setEmailSubject($email_subject)
    {
        
        $this->email_subject = $email_subject;
        return $this;
    }
    
    /**
     * Gets signers
     * @return \Swagger\Client\Model\Signers
     */
    public function getSigners()
    {
        return $this->signers;
    }
  
    /**
     * Sets signers
     * @param \Swagger\Client\Model\Signers $signers \u7B7E\u7F72\u4EBA
     * @return $this
     */
    public function setSigners($signers)
    {
        
        $this->signers = $signers;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
