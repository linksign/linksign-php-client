<?php
/**
 * IdAuth
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * IdAuth Class Doc Comment
 *
 * @category    Class
 * @description Signature identity authentication
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class IdAuth implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'bank_account_requred' => 'string',
        'email_requred' => 'string',
        'face_compare_requred' => 'string',
        'id_number_requred' => 'string',
        'sms_requred' => 'string',
        'wechat_requred' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'bank_account_requred' => 'bankAccountRequred',
        'email_requred' => 'emailRequred',
        'face_compare_requred' => 'faceCompareRequred',
        'id_number_requred' => 'idNumberRequred',
        'sms_requred' => 'smsRequred',
        'wechat_requred' => 'wechatRequred'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'bank_account_requred' => 'setBankAccountRequred',
        'email_requred' => 'setEmailRequred',
        'face_compare_requred' => 'setFaceCompareRequred',
        'id_number_requred' => 'setIdNumberRequred',
        'sms_requred' => 'setSmsRequred',
        'wechat_requred' => 'setWechatRequred'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'bank_account_requred' => 'getBankAccountRequred',
        'email_requred' => 'getEmailRequred',
        'face_compare_requred' => 'getFaceCompareRequred',
        'id_number_requred' => 'getIdNumberRequred',
        'sms_requred' => 'getSmsRequred',
        'wechat_requred' => 'getWechatRequred'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $bank_account_requred ***true***,***false***
      * @var string
      */
    protected $bank_account_requred;
    
    /**
      * $email_requred ***true***,***false***
      * @var string
      */
    protected $email_requred;
    
    /**
      * $face_compare_requred ***true***,***false***
      * @var string
      */
    protected $face_compare_requred;
    
    /**
      * $id_number_requred ***true***,***false***
      * @var string
      */
    protected $id_number_requred;
    
    /**
      * $sms_requred ***true***,***false***
      * @var string
      */
    protected $sms_requred;
    
    /**
      * $wechat_requred *** true ***,***false***
      * @var string
      */
    protected $wechat_requred;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->bank_account_requred = $data["bank_account_requred"];
            $this->email_requred = $data["email_requred"];
            $this->face_compare_requred = $data["face_compare_requred"];
            $this->id_number_requred = $data["id_number_requred"];
            $this->sms_requred = $data["sms_requred"];
            $this->wechat_requred = $data["wechat_requred"];
        }
    }
    
    /**
     * Gets bank_account_requred
     * @return string
     */
    public function getBankAccountRequred()
    {
        return $this->bank_account_requred;
    }
  
    /**
     * Sets bank_account_requred
     * @param string $bank_account_requred ***true***,***false***
     * @return $this
     */
    public function setBankAccountRequred($bank_account_requred)
    {
        
        $this->bank_account_requred = $bank_account_requred;
        return $this;
    }
    
    /**
     * Gets email_requred
     * @return string
     */
    public function getEmailRequred()
    {
        return $this->email_requred;
    }
  
    /**
     * Sets email_requred
     * @param string $email_requred ***true***,***false***
     * @return $this
     */
    public function setEmailRequred($email_requred)
    {
        
        $this->email_requred = $email_requred;
        return $this;
    }
    
    /**
     * Gets face_compare_requred
     * @return string
     */
    public function getFaceCompareRequred()
    {
        return $this->face_compare_requred;
    }
  
    /**
     * Sets face_compare_requred
     * @param string $face_compare_requred ***true***,***false***
     * @return $this
     */
    public function setFaceCompareRequred($face_compare_requred)
    {
        
        $this->face_compare_requred = $face_compare_requred;
        return $this;
    }
    
    /**
     * Gets id_number_requred
     * @return string
     */
    public function getIdNumberRequred()
    {
        return $this->id_number_requred;
    }
  
    /**
     * Sets id_number_requred
     * @param string $id_number_requred ***true***,***false***
     * @return $this
     */
    public function setIdNumberRequred($id_number_requred)
    {
        
        $this->id_number_requred = $id_number_requred;
        return $this;
    }
    
    /**
     * Gets sms_requred
     * @return string
     */
    public function getSmsRequred()
    {
        return $this->sms_requred;
    }
  
    /**
     * Sets sms_requred
     * @param string $sms_requred ***true***,***false***
     * @return $this
     */
    public function setSmsRequred($sms_requred)
    {
        
        $this->sms_requred = $sms_requred;
        return $this;
    }
    
    /**
     * Gets wechat_requred
     * @return string
     */
    public function getWechatRequred()
    {
        return $this->wechat_requred;
    }
  
    /**
     * Sets wechat_requred
     * @param string $wechat_requred *** true ***,***false***
     * @return $this
     */
    public function setWechatRequred($wechat_requred)
    {
        
        $this->wechat_requred = $wechat_requred;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
