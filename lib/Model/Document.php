<?php
/**
 * Document
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Document Class Doc Comment
 *
 * @category    Class
 * @description \u7B7E\u7F72\u6587\u6863\u4FE1\u606F
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Document implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'document_base64' => 'string',
        'document_index' => 'string',
        'file_extension' => 'string',
        'name' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'document_base64' => 'documentBase64',
        'document_index' => 'documentIndex',
        'file_extension' => 'fileExtension',
        'name' => 'name'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'document_base64' => 'setDocumentBase64',
        'document_index' => 'setDocumentIndex',
        'file_extension' => 'setFileExtension',
        'name' => 'setName'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'document_base64' => 'getDocumentBase64',
        'document_index' => 'getDocumentIndex',
        'file_extension' => 'getFileExtension',
        'name' => 'getName'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $document_base64 \u6587\u6863\u5185\u5BB9\uFF08Base64\u683C\u5F0F\uFF09
      * @var string
      */
    protected $document_base64;
    
    /**
      * $document_index \u6587\u6863\u7D22\u5F15\uFF0C\u4E0ESignHere\u5BF9\u5E94
      * @var string
      */
    protected $document_index;
    
    /**
      * $file_extension \u6587\u6863\u540E\u7F00\uFF08\u683C\u5F0F\uFF09
      * @var string
      */
    protected $file_extension;
    
    /**
      * $name \u6587\u6863\u540D\u79F0
      * @var string
      */
    protected $name;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->document_base64 = $data["document_base64"];
            $this->document_index = $data["document_index"];
            $this->file_extension = $data["file_extension"];
            $this->name = $data["name"];
        }
    }
    
    /**
     * Gets document_base64
     * @return string
     */
    public function getDocumentBase64()
    {
        return $this->document_base64;
    }
  
    /**
     * Sets document_base64
     * @param string $document_base64 \u6587\u6863\u5185\u5BB9\uFF08Base64\u683C\u5F0F\uFF09
     * @return $this
     */
    public function setDocumentBase64($document_base64)
    {
        
        $this->document_base64 = $document_base64;
        return $this;
    }
    
    /**
     * Gets document_index
     * @return string
     */
    public function getDocumentIndex()
    {
        return $this->document_index;
    }
  
    /**
     * Sets document_index
     * @param string $document_index \u6587\u6863\u7D22\u5F15\uFF0C\u4E0ESignHere\u5BF9\u5E94
     * @return $this
     */
    public function setDocumentIndex($document_index)
    {
        
        $this->document_index = $document_index;
        return $this;
    }
    
    /**
     * Gets file_extension
     * @return string
     */
    public function getFileExtension()
    {
        return $this->file_extension;
    }
  
    /**
     * Sets file_extension
     * @param string $file_extension \u6587\u6863\u540E\u7F00\uFF08\u683C\u5F0F\uFF09
     * @return $this
     */
    public function setFileExtension($file_extension)
    {
        
        $this->file_extension = $file_extension;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name \u6587\u6863\u540D\u79F0
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
