<?php
/**
 * Signers
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Signers Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Signers implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'signer_companys' => '\Swagger\Client\Model\SignerCompany[]',
        'signer_persons' => '\Swagger\Client\Model\SignerPerson[]',
        'sponsor_email' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'signer_companys' => 'signerCompanys',
        'signer_persons' => 'signerPersons',
        'sponsor_email' => 'sponsorEmail'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'signer_companys' => 'setSignerCompanys',
        'signer_persons' => 'setSignerPersons',
        'sponsor_email' => 'setSponsorEmail'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'signer_companys' => 'getSignerCompanys',
        'signer_persons' => 'getSignerPersons',
        'sponsor_email' => 'getSponsorEmail'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $signer_companys \u7B7E\u7F72\u4EBA\u5217\u8868\uFF08\u516C\u53F8\uFF09
      * @var \Swagger\Client\Model\SignerCompany[]
      */
    protected $signer_companys;
    
    /**
      * $signer_persons \u7B7E\u7F72\u4EBA\u5217\u8868\uFF08\u4E2A\u4EBA\uFF09
      * @var \Swagger\Client\Model\SignerPerson[]
      */
    protected $signer_persons;
    
    /**
      * $sponsor_email \u7B7E\u7F72\u53D1\u8D77\u4EBA\u90AE\u7BB1
      * @var string
      */
    protected $sponsor_email;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->signer_companys = $data["signer_companys"];
            $this->signer_persons = $data["signer_persons"];
            $this->sponsor_email = $data["sponsor_email"];
        }
    }
    
    /**
     * Gets signer_companys
     * @return \Swagger\Client\Model\SignerCompany[]
     */
    public function getSignerCompanys()
    {
        return $this->signer_companys;
    }
  
    /**
     * Sets signer_companys
     * @param \Swagger\Client\Model\SignerCompany[] $signer_companys \u7B7E\u7F72\u4EBA\u5217\u8868\uFF08\u516C\u53F8\uFF09
     * @return $this
     */
    public function setSignerCompanys($signer_companys)
    {
        
        $this->signer_companys = $signer_companys;
        return $this;
    }
    
    /**
     * Gets signer_persons
     * @return \Swagger\Client\Model\SignerPerson[]
     */
    public function getSignerPersons()
    {
        return $this->signer_persons;
    }
  
    /**
     * Sets signer_persons
     * @param \Swagger\Client\Model\SignerPerson[] $signer_persons \u7B7E\u7F72\u4EBA\u5217\u8868\uFF08\u4E2A\u4EBA\uFF09
     * @return $this
     */
    public function setSignerPersons($signer_persons)
    {
        
        $this->signer_persons = $signer_persons;
        return $this;
    }
    
    /**
     * Gets sponsor_email
     * @return string
     */
    public function getSponsorEmail()
    {
        return $this->sponsor_email;
    }
  
    /**
     * Sets sponsor_email
     * @param string $sponsor_email \u7B7E\u7F72\u53D1\u8D77\u4EBA\u90AE\u7BB1
     * @return $this
     */
    public function setSponsorEmail($sponsor_email)
    {
        
        $this->sponsor_email = $sponsor_email;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
